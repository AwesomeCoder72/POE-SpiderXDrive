{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nmotor_1 = Motor(Ports.PORT1, False)\nmotor_2 = Motor(Ports.PORT2, False)\nmotor_3 = Motor(Ports.PORT3, False)\nmotor_4 = Motor(Ports.PORT4, False)\ndistance_5 = Distance(Ports.PORT5)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode EXP Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport random\n\n# Begin project code\n\nclass XDrive():\n    def __init__(self, FR_drive, FL_drive, BR_drive, BL_drive, dist_sensor):\n        self.fr = FR_drive\n        self.fl = FL_drive\n        self.br = BR_drive\n        self.bl = BL_drive\n        self.dst = dist_sensor\n\n        self.x_motors = [self.fr, self.fl, self.br, self.bl]\n\n        self.sees_object = False\n\n        self.is_stopped = False\n\n        self.movement_directions = [\"forward\", \"backward\", \"left\", \"right\", \"spin_cw\", \"spin_ccw\"]\n\n        # self.movement_options = [self.spin_forward, \n        #                          self.spin_backward, \n        #                          self.spin_left, \n        #                          self.spin_right,\n        #                          self.spin_turn]\n    \n    def set_vel(self, vel):\n        for motor in self.x_motors:\n            motor.set_velocity(vel, PERCENT)\n    \n    def spin_straight_or_turn(self, direction):\n        self.is_stopped = False\n        if (self.movement_directions[direction] == \"forward\"):\n            self.fr.spin(REVERSE)  \n            self.br.spin(REVERSE)\n            self.fl.spin(FORWARD)\n            self.bl.spin(FORWARD)\n        elif (self.movement_directions[direction] == \"backward\"):\n            self.fr.spin(FORWARD)\n            self.br.spin(FORWARD)\n            self.fl.spin(REVERSE)\n            self.bl.spin(REVERSE)\n        elif (self.movement_directions[direction] == \"left\"):\n            self.fr.spin(REVERSE)\n            self.br.spin(FORWARD)\n            self.fl.spin(REVERSE)\n            self.bl.spin(FORWARD)\n        elif (self.movement_directions[direction] == \"right\"):\n            self.fr.spin(FORWARD)\n            self.br.spin(REVERSE)\n            self.fl.spin(FORWARD)\n            self.bl.spin(REVERSE)        \n        elif (self.movement_directions[direction] == \"spin_cw\"):\n            self.spin_turn(True)\n        elif (self.movement_directions[direction] == \"spin_ccw\"):\n            self.spin_turn(False)\n\n\n\n    def spin_forward(self):\n        self.fr.spin(REVERSE)  \n        self.br.spin(REVERSE)\n        self.fl.spin(FORWARD)\n        self.bl.spin(FORWARD)\n\n    def spin_backward(self):\n        self.fr.spin(FORWARD)\n        self.br.spin(FORWARD)\n        self.fl.spin(REVERSE)\n        self.bl.spin(REVERSE)\n\n    def spin_left(self):\n        self.fr.spin(REVERSE)\n        self.br.spin(FORWARD)\n        self.fl.spin(REVERSE)\n        self.bl.spin(FORWARD)\n\n    def spin_right(self):\n        self.fr.spin(FORWARD)\n        self.br.spin(REVERSE)\n        self.fl.spin(FORWARD)\n        self.bl.spin(REVERSE)\n\n    def spin_turn(self, direction):\n        self.set_vel(40)\n        if direction:\n            for motor in self.x_motors:\n                motor.spin(FORWARD)\n        else:\n            for motor in self.x_motors:\n                motor.spin(REVERSE)\n\n    def select_random_movement(self, option_count):\n        selection = random.randint(0, option_count)\n\n        return selection\n    \n    def check_for_object(self, inches_away):\n        brain.screen.set_cursor(2, 1)\n        brain.screen.print( distance_5.object_distance(INCHES))\n        if distance_5.object_distance(INCHES) < inches_away:\n            sees_object = True\n        else:\n            sees_object = False\n        \n        return sees_object\n\n    def main_movement_loop(self):\n        time_zero = brain.timer.time(MSEC)\n        new_chase_movement = True\n        new_rand_movement = True\n\n        brain.screen.set_cursor(1,1)\n\n        x = 750\n\n        movement_index = self.select_random_movement(5)\n        time_new_movement_start = brain.timer.time(MSEC)\n\n        while True:\n            brain.screen.set_cursor(1,1)\n            current_time = brain.timer.time(MSEC)\n\n\n            if (self.check_for_object(12) and not self.check_for_object(3)):\n                brain.screen.print(True)\n                # if not self.is_stopped:\n                #     self.stopall()\n                self.set_vel(100)\n                \n                self.spin_straight_or_turn(0)\n\n            elif (current_time - time_new_movement_start) > x:\n                time_new_movement_start = brain.timer.time(MSEC)\n                movement_index = self.select_random_movement(5)\n                brain.screen.set_cursor(3, 1)\n                # x+=x\n                self.stopall()\n            \n            \n\n            else:\n                self.set_vel(20)\n                brain.screen.print(False)\n\n                self.spin_straight_or_turn(movement_index)\n\n            brain.screen.set_cursor(3, 1)\n            brain.screen.print(movement_index)\n\n            wait(0.05, SECONDS)\n            brain.screen.clear_screen()\n\n            # self.stopall()        \n\n    def move_to_theta(self, theta):\n        self.fr.spin(FORWARD)\n        self.br.spin(REVERSE)\n        self.fl.spin(FORWARD)\n        self.bl.spin(REVERSE)\n        \n        # my_number = atan        \n\n\n    def stopall(self):\n        for motor in self.x_motors:\n            motor.stop()\n        # self.is_stopped = True\n\nspiderDrive = XDrive(motor_2, motor_1, motor_3, motor_4, distance_5)\nspiderDrive.set_vel(20)\n\nspiderDrive.main_movement_loop()\n\n# spiderDrive.spin_forward()\n# wait(1,SECONDS)\n# spiderDrive.spin_backward()\n# wait(1,SECONDS)\n\n# spiderDrive.spin_right()\n# wait(1,SECONDS)\n# spiderDrive.spin_left()\n# wait(1,SECONDS)\n\nspiderDrive.stopall()\n","textLanguage":"python","rconfig":[{"port":[1],"name":"motor_1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"motor_2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"motor_3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"motor_4","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[5],"name":"distance_5","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}